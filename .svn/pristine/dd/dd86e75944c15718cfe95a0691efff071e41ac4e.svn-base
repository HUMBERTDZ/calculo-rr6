package com.ws_rr7_generico.services.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;
import java.text.DecimalFormat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.ws_rr7_generico.dao.BaseDAO;
import com.ws_rr7_generico.models.ArchivoRespuesta;
import com.ws_rr7_generico.models.Base;
import com.ws_rr7_generico.models.BaseLayoutRr7;
import com.ws_rr7_generico.rest.reportesRegulatorios;
import com.ws_rr7_generico.services.BASEService;
import com.ws_rr7_generico.util.Constantes;
import com.ws_rr7_generico.util.ResponseMessage;

@Transactional(rollbackFor = Exception.class)
@Service
public class BASEServiceImpl implements BASEService{
	
	Logger logger = LoggerFactory.getLogger(reportesRegulatorios.class);
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	private BaseDAO baseDAO;

	String nivel1 = "0",nivel2 = "0",nivel3 = "0",nivel4 = "0",Operacion = "0",CveRamo = "0",CveSubram = "0",CveSubsubramo = "0";
	int Moneda = 0;
	double RsvaTot = 0,RsvaRet = 0,RsvaCed = 0,PorCp = 0;
	String cadena =	nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|").concat(String.valueOf(Moneda))
					.concat("|").concat(Operacion).concat("|").concat(CveRamo).concat("|").concat(CveSubram).concat("|").concat(CveSubsubramo).concat("|")
					.concat(String.valueOf(RsvaTot)).concat("|").concat(String.valueOf(RsvaRet)).concat("|").concat(String.valueOf(RsvaCed)).concat("|")
					.concat(String.valueOf(PorCp)).concat("|;");
	
	@Override
	 public ArchivoRespuesta obtenerBASE(String nombre) throws IOException {
		ArchivoRespuesta ar = new ArchivoRespuesta();
		ar.setBaseArchivo(GenerarTxtBase(nombre));
		ar.setNombreArchivo(nombre);
		return ar;
	}
	public String GenerarTxtBase(String nombre) throws IOException {
		String response = "";
		List<Base> ListaBase= baseDAO.findAll(Sort.by("nivel1").and(Sort.by("nivel2").and(Sort.by("nivel3").and(Sort.by("nivel4")))));
		File archivo = new File("D:\\TempSesa\\" + nombre);

		if (archivo.exists()) {
			archivo.delete();
		}
		archivo.createNewFile();
		FileWriter fw = new FileWriter(archivo, true);
		BufferedWriter bw = new BufferedWriter(fw);
		String pattern = "#.###";
		DecimalFormat decimalFormat =  new DecimalFormat(pattern);
		if (ListaBase != null && ListaBase.size() != 0) {
			for (Base Lista : ListaBase) {

				nivel1 = Lista.getNivel1();
				nivel2 = Lista.getNivel2();
				nivel3 = Lista.getNivel3();
				nivel4 = Lista.getNivel4();
				Moneda = Lista.getMoneda();
				Operacion = Lista.getOperacion();
				CveRamo = Lista.getCveRamo();
				CveSubram = Lista.getCveSubram();
				CveSubsubramo = Lista.getCveSubsubramo();
				RsvaTot =  Lista.getRsvaTot();
				String RTOT =  decimalFormat.format(RsvaTot);
				RsvaRet = Lista.getRsvaRet();
				String RRET = decimalFormat.format(RsvaRet);
				RsvaCed = Lista.getRsvaCed();
				String RCED = decimalFormat.format(RsvaCed);
				PorCp = Lista.getPorCp();
				
				System.out.println(RRET);
				bw.write(nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|").concat(String.valueOf(Moneda))
						.concat("|").concat(Operacion).concat("|").concat(CveRamo).concat("|").concat(CveSubram).concat("|").concat(CveSubsubramo).concat("|")
						.concat(String.valueOf(RTOT)).concat("|").concat(String.valueOf(RRET)).concat("|").concat(String.valueOf(RCED)).concat("|")
						.concat(String.valueOf(PorCp)).concat("|;"));
				bw.newLine();
			}
			System.out.println("lleno");
		} else {
			bw.write(cadena);
			bw.newLine();
			System.out.println("nulo o vacio");
		}
		bw.close();
		fw.close();
		System.out.println("Archivo BASE creado correctamente");
		byte[] input_file;
		byte[] encodedBytes;
		input_file = Files.readAllBytes(Paths.get(archivo.getAbsolutePath()));
		encodedBytes = Base64.getEncoder().encode(input_file);
		response = new String(encodedBytes);
		return response;
	}
	@Override
	public ResponseMessage updateBase(List<BaseLayoutRr7> getBaseLayoutRr7) {
		ResponseMessage respuesta = null;		
		List<Base> getBase= baseDAO.findAll();
		BaseLayoutRr7 baseLayoutRr7Result ;
		for (Base base: getBase) {

			baseLayoutRr7Result = getBaseLayoutRr7
	                .stream().filter(producer -> (producer.getCtaQtoNivNvoCat()+producer.getTipoMoneda()+producer.getRamo()+producer.getSubramo()+producer.getSubsubramo()).
	                		equals(base.getNivel1()+base.getNivel2()+base.getNivel3()+base.getNivel4()+base.getMoneda()
	                		+base.getCveRamo()+base.getCveSubram()+base.getCveSubsubramo())).findFirst().orElse(null);
			if (baseLayoutRr7Result != null) {
			
				base.setRsvaTot(base.getRsvaRet()-base.getRsvaCed());

			}else {
				base.setRsvaTot(0);
				
			}			
		}
		if (baseDAO.saveAll(getBase) != null) {
			respuesta = new ResponseMessage(Constantes.RESPONSEMESSAGE_OK, "Archivo Base actualizado ", 1);
		}		
		return respuesta;
	}
	
	@Override
	public boolean getExistRecords(String anioMes) {

		boolean existenRegistros = false;
		

		String query = "SELECT IIF (COUNT(*) >= 1, 1, 0) AS EXISTEN_REGISTROS FROM BASE WHERE ANIOMES = '" + anioMes + "';";

		logger.info(query);
		SqlRowSet rowSet = jdbcTemplate.queryForRowSet(query);

		while(rowSet.next()){
			existenRegistros =   rowSet.getInt("EXISTEN_REGISTROS") == 1 ? true : false ;
		}
		logger.info("existenRegistros " + existenRegistros);
		return existenRegistros;
	}
}

