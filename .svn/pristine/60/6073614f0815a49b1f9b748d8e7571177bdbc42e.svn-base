package com.ws_rr7_generico.services.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ws_rr7_generico.dao.CsocDAO;
import com.ws_rr7_generico.models.ArchivoRespuesta;
import com.ws_rr7_generico.models.BaseLayoutRr7;
import com.ws_rr7_generico.models.Csoc;
import com.ws_rr7_generico.models.Opas;
import com.ws_rr7_generico.services.CSOCService;
import com.ws_rr7_generico.util.Constantes;
import com.ws_rr7_generico.util.ResponseMessage;

@Transactional(rollbackFor = Exception.class)
@Service
public class CSOCServiceImpl  implements CSOCService{
	@Autowired
	private CsocDAO csocDAO;
	String nivel1="0",nivel2="0",nivel3="0",nivel4="0",claveCapSoc="0",subClaveCapSoc="0",afectacion="0",nivelFondos="0";
	int moneda = 0,saldo=0;	
	String cadena = nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
			.concat(String.valueOf(moneda)).concat("|").concat(claveCapSoc).concat("|").concat(subClaveCapSoc).concat("|")
			.concat(String.valueOf(saldo)).concat(afectacion).concat("|").concat(nivelFondos).concat("|;");

	@Override
	 public ArchivoRespuesta obtenerCSOC(String nombre) throws IOException {
		ArchivoRespuesta ar = new ArchivoRespuesta();
		ar.setBaseArchivo(GenerarTxtCsoc(nombre));
		ar.setNombreArchivo(nombre);
		return ar;
	}
	public String GenerarTxtCsoc(String nombre) throws IOException {
		String response = "";
		List<Csoc> ListaCsoc = csocDAO.findAll();
				
		File archivo = new File("D:\\TempSesa\\" + nombre);

		if (archivo.exists()) {
			archivo.delete();
		}
		archivo.createNewFile();
		FileWriter fw = new FileWriter(archivo, true);
		BufferedWriter bw = new BufferedWriter(fw);
		if (ListaCsoc != null && ListaCsoc.size() != 0) {
			for (Csoc Lista : ListaCsoc) {

				nivel1 = Lista.getNivel_1();
				nivel2 = Lista.getNivel_2();
				nivel3 = Lista.getNivel_3();
				nivel4 = Lista.getNivel_4();
				moneda = Lista.getMoneda();
				claveCapSoc = Lista.getClaveCapSoc();
				subClaveCapSoc = Lista.getSubClaveCapSoc();
				saldo = Lista.getSaldo();
				afectacion = Lista.getAfectacion();
				nivelFondos = Lista.getNivelFondos();
				
				bw.write(nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
						.concat(String.valueOf(moneda)).concat("|").concat(claveCapSoc).concat("|").concat(subClaveCapSoc).concat("|")
						.concat(String.valueOf(saldo)).concat("|").concat(afectacion).concat("|").concat(nivelFondos).concat("|;"));
				bw.newLine();
			}
			System.out.println("lleno");
		} else {
			bw.write(cadena);
			bw.newLine();
			System.out.println("nulo o vacio");
		}
		bw.close();
		fw.close();
		System.out.println("Archivo CSOC creado correctamente");
		byte[] input_file;
		byte[] encodedBytes;
		input_file = Files.readAllBytes(Paths.get(archivo.getAbsolutePath()));
		encodedBytes = Base64.getEncoder().encode(input_file);
		response = new String(encodedBytes);
		return response;
	}
	@Override
	public ResponseMessage updateCsoc(List<BaseLayoutRr7> getBaseLayoutRr7) {
		ResponseMessage respuesta = null;		
		List<Csoc> getCsoc = csocDAO.findAll();
		BaseLayoutRr7 baseLayoutRr7Result ;
		for (Csoc csoc: getCsoc) {

			baseLayoutRr7Result = getBaseLayoutRr7
	                .stream().filter(producer -> (producer.getCtaQtoNivNvoCat()+producer.getTipoMoneda()+producer.getAfecto()+producer.getNivFondPropAdmi()+producer.getSubCtaCatAnt()).
	                		equals(csoc.getNivel_1()+csoc.getNivel_2()+csoc.getNivel_3()+csoc.getNivel_4()+csoc.getMoneda()+csoc.getAfectacion()+csoc.getNivelFondos()+csoc.getSubClaveCapSoc())).findFirst().orElse(null);

			if (baseLayoutRr7Result != null) {
				csoc.setSaldo((int)baseLayoutRr7Result.getMontMonConsolidada());				
			}else {
				csoc.setSaldo(0);
			}			
		}
		if (csocDAO.saveAll(getCsoc) != null) {
			respuesta = new ResponseMessage(Constantes.RESPONSEMESSAGE_OK, "Archivo Csoc actualizado ", 1);
		}
		
		return respuesta;

	}
}
