package com.ws_rr7_generico.services.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ws_rr7_generico.dao.AcreDAO;
import com.ws_rr7_generico.dao.BaseLayoutRr7DAO;
import com.ws_rr7_generico.models.Acre;
import com.ws_rr7_generico.models.ArchivoRespuesta;
import com.ws_rr7_generico.models.BaseLayoutRr7;
import com.ws_rr7_generico.models.Oact;
import com.ws_rr7_generico.services.ACREService;
import com.ws_rr7_generico.util.Constantes;
import com.ws_rr7_generico.util.ResponseMessage;

@Transactional(rollbackFor = Exception.class)
@Service
public class ACREServiceImpl implements ACREService{
	@Autowired
	private AcreDAO acreDAO;

	@Autowired
	private BaseLayoutRr7DAO baseLayoutRr7DAO;

	
	String nivel1 = "0",nivel2 = "0",nivel3 = "0",nivel4 = "0",claveAcre = "0",subClaveAcre = "0";		
	int moneda = 0;
	double saldo = 0;

	String cadena = nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
	.concat(String.valueOf(moneda)).concat("|").concat(claveAcre).concat("|").concat(subClaveAcre).concat("|").concat(saldo+ "").concat("|;");
	
	@Override
	 public ArchivoRespuesta obtenerACRE(String nombre) throws IOException {
		ArchivoRespuesta ar = new ArchivoRespuesta();
		ar.setBaseArchivo(GenerarTxtAcre(nombre));
		ar.setNombreArchivo(nombre);
		return ar;
	}
	
	public String GenerarTxtAcre(String nombre) throws IOException {
		String response = "";
		List<Acre> ListaAcre = acreDAO.findAll();

		File archivo = new File("D:\\TempSesa\\" + nombre);

		if (archivo.exists()) {
			archivo.delete();
		}
		archivo.createNewFile();
		FileWriter fw = new FileWriter(archivo, true);
		BufferedWriter bw = new BufferedWriter(fw);
		if (ListaAcre != null && ListaAcre.size() != 0) {
			for (Acre Lista : ListaAcre) {

				nivel1 = Lista.getNivel1().isEmpty() || Lista.getNivel1() == null ? "0" : Lista.getNivel1() ;
				nivel2 = Lista.getNivel2();
				nivel3 = Lista.getNivel3();
				nivel4 = Lista.getNivel4();
				moneda = Lista.getMoneda();
				claveAcre = Lista.getCveAcreed();
				subClaveAcre = Lista.getSubCveAcreed();
				saldo = Lista.getValores();				
				
				bw.write(nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
						.concat(String.valueOf(moneda)).concat("|").concat(claveAcre).concat("|").concat(subClaveAcre).concat("|").concat(saldo+"").concat("|;"));
				bw.newLine();
			}
			System.out.println("lleno");
		} else {
			bw.write(cadena);
			bw.newLine();
			System.out.println("nulo o vacio");
		}
		bw.close();
		fw.close();
		System.out.println("Archivo ACRE creado correctamente");
		byte[] input_file;
		byte[] encodedBytes;
		input_file = Files.readAllBytes(Paths.get(archivo.getAbsolutePath()));
		encodedBytes = Base64.getEncoder().encode(input_file);
		response = new String(encodedBytes);
		return response;
	}

	@Override
	public ResponseMessage updateAcre(List<BaseLayoutRr7> getBaseLayoutRr7) {
		ResponseMessage respuesta = null;		
		List<Acre> getAcre = acreDAO.findAll();
		BaseLayoutRr7 baseLayoutRr7Result ;
		for (Acre acre: getAcre) {

			
			baseLayoutRr7Result = getBaseLayoutRr7
	                .stream().filter(producer -> (producer.getCtaQtoNivNvoCat()+producer.getTipoMoneda()+producer.getSubCtaCatAnt()).
	                		equals(acre.getNivel1()+acre.getNivel2()+acre.getNivel3()+acre.getNivel4()+acre.getMoneda()+acre.getSubCveAcreed())).findFirst().orElse(null);

	        if (baseLayoutRr7Result != null) {
				acre.setValores(baseLayoutRr7Result.getMontMonConsolidada());
			}else {
				acre.setValores(0);
			}			
		}
		if (acreDAO.saveAll(getAcre) != null) {
			respuesta = new ResponseMessage(Constantes.RESPONSEMESSAGE_OK, "Archivo Acre actualizado ", null);
		}
		
		return respuesta;
	}
}

