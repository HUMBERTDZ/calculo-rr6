package com.ws_rr7_generico.services.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ws_rr7_generico.dao.CsinDAO;
import com.ws_rr7_generico.models.ArchivoRespuesta;
import com.ws_rr7_generico.models.BaseLayoutRr7;
import com.ws_rr7_generico.models.Csin;
import com.ws_rr7_generico.models.Opac;
import com.ws_rr7_generico.services.CSINService;
import com.ws_rr7_generico.util.Constantes;
import com.ws_rr7_generico.util.ResponseMessage;

@Transactional(rollbackFor = Exception.class)
@Service
public class CSINServiceImpl implements CSINService {
	@Autowired
	private CsinDAO csinDAO;
	
	String nivel1 = "0",nivel2 = "0",nivel3 = "0",nivel4 = "0",moneda = "0",claveCtoSin = "0",subClaveCtoSin = "0",
			operacion = "0",cveRamo = "0",cveSubram = "0",cveSubsubramo = "0";
	double saldo = 0;
	String cadena =	nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
			.concat(moneda).concat("|").concat(claveCtoSin).concat("|").concat(subClaveCtoSin).concat("|").concat(operacion)
			.concat("|").concat(cveRamo).concat("|").concat(cveSubram).concat("|").concat(cveSubsubramo).concat("|")
			.concat(String.valueOf(saldo)).concat("|;");
	
	@Override
	public ArchivoRespuesta obtenerCSIN(String nombre) throws IOException {

		ArchivoRespuesta ar = new ArchivoRespuesta();
		ar.setBaseArchivo(GenerarTxtCsin(nombre));
		ar.setNombreArchivo(nombre);
		return ar;
	}

	public String GenerarTxtCsin(String nombre) throws IOException {

		String response = "";
		List<Csin> ListaCSIN= csinDAO.findAll();

		File archivo = new File("D:\\TempSesa\\" + nombre);

		if (archivo.exists()) {
			archivo.delete();
		}
		archivo.createNewFile();
		FileWriter fw = new FileWriter(archivo, true);
		BufferedWriter bw = new BufferedWriter(fw);
		if (ListaCSIN != null && ListaCSIN.size() != 0) {
			for (Csin Lista : ListaCSIN) {

				nivel1 = Lista.getNivel1();
				nivel2 = Lista.getNivel2();
				nivel3 = Lista.getNivel3();
				nivel4 = Lista.getNivel4();
				moneda = Lista.getMoneda();
				claveCtoSin = Lista.getClaveCtoSin();
				subClaveCtoSin = Lista.getSubClaveCtoSin();
				operacion = Lista.getOperacion();
				cveRamo = Lista.getCveRamo();
				cveSubram = Lista.getCveSubram();
				cveSubsubramo = Lista.getCveSubsubramo();
				saldo = Lista.getSaldo();				
				bw.write(nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
						.concat(moneda).concat("|").concat(claveCtoSin).concat("|").concat(subClaveCtoSin).concat("|").concat(operacion)
						.concat("|").concat(cveRamo).concat("|").concat(cveSubram).concat("|").concat(cveSubsubramo).concat("|")
						.concat(String.valueOf(saldo)).concat("|;"));
				bw.newLine();
			}
			System.out.println("lleno");
		} else {
			bw.write(cadena);
			bw.newLine();
			System.out.println("nulo o vacio");
		}
		bw.close();
		fw.close();
		System.out.println("Archivo CSIN creado correctamente");
		byte[] input_file;
		byte[] encodedBytes;
		input_file = Files.readAllBytes(Paths.get(archivo.getAbsolutePath()));
		encodedBytes = Base64.getEncoder().encode(input_file);
		response = new String(encodedBytes);
		return response;
	}

	@Override
	public ResponseMessage updateCsin(List<BaseLayoutRr7> getBaseLayoutRr7) {
		ResponseMessage respuesta = null;		
		List<Csin> getCsin = csinDAO.findAll();
		BaseLayoutRr7 baseLayoutRr7Result ;
		for (Csin csin: getCsin) {

			baseLayoutRr7Result = getBaseLayoutRr7
	                .stream().filter(producer -> (producer.getCtaQtoNivNvoCat()+producer.getTipoMoneda()+producer.getRamo()+producer.getSubramo()+producer.getSubsubramo()+producer.getSubCtaCatAnt()).
	                		equals(csin.getNivel1()+csin.getNivel2()+csin.getNivel3()+csin.getNivel4()+csin.getMoneda()
	                		+csin.getCveRamo()+csin.getCveSubram()+csin.getCveSubsubramo()+csin.getSubClaveCtoSin())).findFirst().orElse(null);
			if (baseLayoutRr7Result != null) {
				csin.setSaldo((int)baseLayoutRr7Result.getMontMonConsolidada());
			}else {
				csin.setSaldo(0);
			}			
		}
		if (csinDAO.saveAll(getCsin) != null) {
			respuesta = new ResponseMessage(Constantes.RESPONSEMESSAGE_OK, "Archivo Csin actualizado ", 1);
		}		
		return respuesta;
	}


}
