package com.ws_rr7_generico.services.impl;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.ws_rr7_generico.dao.Rr7ArchivoHistoricoDAO;
import com.ws_rr7_generico.models.CCArchivosRR7;
import com.ws_rr7_generico.models.Rr7ArchivoHistorico;
import com.ws_rr7_generico.rest.reportesRegulatorios;
import com.ws_rr7_generico.services.RR7ARCHIVOHISTORICOService;

//@Transactional(rollbackFor = Exception.class)
@Service
public class RR7ARCHIVOHISTORICOServiceImpl implements RR7ARCHIVOHISTORICOService {
	
	Logger logger = LoggerFactory.getLogger(reportesRegulatorios.class);
	
	@Autowired 
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	private Rr7ArchivoHistoricoDAO rr7ArchivoHistoricoDAO;
	
	@Override
	public List<Rr7ArchivoHistorico> mostrarArchivos() {
		return rr7ArchivoHistoricoDAO.findAll();
	}

	@Override
	public List<CCArchivosRR7> mostrarArchivosRR7(String aniomes) {
		
		String query = "SELECT CC.ID, CC.NOMBRESIMPLIFICADO, CC.NOMBREEXTENDIDO, "
				+ "INFOCARGADA = CASE"
				+ "    WHEN CC.ID = 3 THEN IIF((SELECT TOP 1 NIVEL_1 FROM INVE WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 4 THEN IIF((SELECT TOP 1 NIVEL_1 FROM INDE WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 5 THEN IIF((SELECT TOP 1 NIVEL_1 FROM INMU WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 6 THEN IIF((SELECT TOP 1 NIVEL_1 FROM CRED WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 7 THEN IIF((SELECT TOP 1 NIVEL_1 FROM DEUD WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 8 THEN IIF((SELECT TOP 1 NIVEL_1 FROM OINV WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 9 THEN IIF((SELECT TOP 1 NIVEL_1 FROM IRRE WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 21 THEN IIF((SELECT TOP 1 NIVEL_1 FROM BASE WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 22 THEN IIF((SELECT TOP 1 NIVEL_1 FROM CCMP WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ "	WHEN CC.ID = 23 THEN IIF((SELECT TOP 1 NIVEL_1 FROM FOPA WHERE ANIOMES='"+aniomes+"') IS NULL, 0 ,1 )"
				+ " END "
				+ "FROM CCARCHIVOSRR7 CC WHERE ID < 24";
		
		List<Map<String, Object>> lstDatos = jdbcTemplate.queryForList(query);

		List<CCArchivosRR7> lstArchivosRr7 = new ArrayList<>();
		CCArchivosRR7 archivo;
		
		for (@SuppressWarnings("rawtypes")
		Iterator iterator = lstDatos.iterator(); iterator.hasNext();) {
			@SuppressWarnings("unchecked")
			Map<String, Object> map = (Map<String, Object>) iterator.next();
			archivo = new CCArchivosRR7();
			archivo.setId(Integer.parseInt(map.get("ID").toString()));
			archivo.setNombreSimplificado(map.get("NOMBRESIMPLIFICADO") != null ? map.get("NOMBRESIMPLIFICADO").toString() : "");
			archivo.setNombreExtendido(map.get("NOMBREEXTENDIDO") != null ? map.get("NOMBREEXTENDIDO").toString(): "");
			archivo.setInfoCargada(map.get("INFOCARGADA") != null ? map.get("INFOCARGADA").toString() : "2");
			lstArchivosRr7.add(archivo);

		}			
		return lstArchivosRr7;
	}
	
	@Override
	public int getExistReporte(int anio, String mes, int idArchivo) {
		int existenRegistros = 0;

		String query = "SELECT IIF (COUNT(*) >= 1, 1, 0) AS EXISTEN_REGISTROS FROM RR7ARCHIVOHISTORICO WHERE ANIO = " + anio + "  AND MES = '" + mes + "' AND IDARCHIVO = " + idArchivo + " ;";

		logger.info(query);
		SqlRowSet rowSet = jdbcTemplate.queryForRowSet(query);

		while(rowSet.next()){
			existenRegistros =  rowSet.getInt("EXISTEN_REGISTROS");
		}
		return existenRegistros;
	}

	@Override
	public boolean existenErroresArchivo(String nombreArchivo, String anioMes) {
		Connection conn = null;
		
		int resultado1 = 0;
		try {
			conn = jdbcTemplate.getDataSource().getConnection();
			
			logger.info("Llamar a sp call con EXEC SP_VALIDACIONES_"+nombreArchivo + " '"+ anioMes + "'" + ",0");
			CallableStatement call = conn.prepareCall("{call SP_VALIDACIONES_" + nombreArchivo + " (?, ?)}");
			//call.setQueryTimeout(60);
			
			call.setString(1, anioMes);
			call.registerOutParameter(2, Types.INTEGER);
			call.execute();
			resultado1 = call.getInt(2);
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		boolean existenErrores = resultado1==1?true:false;
		logger.info("Existen errores a validar = "+existenErrores);
		return existenErrores;
	}

	@Override
	public List<Map<String, Object>> getRecordGeneral(String query) {
		System.out.println("Se ejecutara el query:"+query);
		List<Map<String, Object>> lstDatos = jdbcTemplate.queryForList(query);		
		return lstDatos;
	}
}
