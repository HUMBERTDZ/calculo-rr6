package com.ws_rr7_generico.services.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ws_rr7_generico.dao.OpacDAO;
import com.ws_rr7_generico.models.ArchivoRespuesta;
import com.ws_rr7_generico.models.BaseLayoutRr7;
import com.ws_rr7_generico.models.Cadq;
import com.ws_rr7_generico.models.Opac;
import com.ws_rr7_generico.services.OPACService;
import com.ws_rr7_generico.util.Constantes;
import com.ws_rr7_generico.util.ResponseMessage;

@Transactional(rollbackFor = Exception.class)
@Service
public class OPACServiceImpl implements OPACService{
	@Autowired
	private OpacDAO opacDAO;
	
	String nivel1="0",nivel2="0",nivel3="0",nivel4="0",claveOperAnaConex="0",subclaveOperAnaConex="0",
			cveOper="0",cveRamo="0",cveSubRam="0",cveSubSubRamo="0", moneda="0";
	int saldo=0;
	String cadena = nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
			.concat(moneda).concat("|").concat(claveOperAnaConex).concat("|").concat(subclaveOperAnaConex).concat("|")
			.concat(cveOper).concat("|").concat(cveRamo).concat("|").concat(cveSubRam).concat("|").concat(cveSubSubRamo).concat("|")
			.concat(String.valueOf(saldo)).concat("|;");

	@Override
	 public ArchivoRespuesta obtenerOPAC(String nombre) throws IOException {
		ArchivoRespuesta ar = new ArchivoRespuesta();
		ar.setBaseArchivo(GenerarTxtOpac(nombre));
		ar.setNombreArchivo(nombre);
		return ar;
	}
	
	public String GenerarTxtOpac(String nombre) throws IOException {
		String response = "";
		List<Opac> ListaOpac = opacDAO.findAll(Sort.by("nivel1").and(Sort.by("nivel2").and(Sort.by("nivel3").and(Sort.by("nivel4"))
				.and(Sort.by("moneda")).and(Sort.by("claveOperAnaConex")).and(Sort.by("subClaveOperAnaConex")).and(Sort.by("cveOper"))
				.and(Sort.by("cveRamo")).and(Sort.by("cveSubRam")).and(Sort.by("cveSubSubRamo")))));
				
		File archivo = new File("D:\\TempSesa\\" + nombre);

		if (archivo.exists()) {
			archivo.delete();
		}
		archivo.createNewFile();
		FileWriter fw = new FileWriter(archivo, true);
		BufferedWriter bw = new BufferedWriter(fw);
		if (ListaOpac != null && ListaOpac.size() != 0) {
			for (Opac Lista : ListaOpac) {

				nivel1 = Lista.getNivel1();
				nivel2 = Lista.getNivel2();
				nivel3 = Lista.getNivel3();
				nivel4 = Lista.getNivel4();
				moneda = Lista.getMoneda();
				claveOperAnaConex = Lista.getClaveOperAnaConex();
				subclaveOperAnaConex = Lista.getSubClaveOperAnaConex();
				cveOper = Lista.getCveOper();
				cveRamo = Lista.getCveRamo();
				cveSubRam = Lista.getCveSubRam();
				cveSubSubRamo = Lista.getCveSubSubRamo();
				saldo = Lista.getSaldo();
				
				
				bw.write(nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
						.concat(moneda).concat("|").concat(claveOperAnaConex).concat("|").concat(subclaveOperAnaConex).concat("|")
						.concat(cveOper).concat("|").concat(cveRamo).concat("|").concat(cveSubRam).concat("|").concat(cveSubSubRamo).concat("|")
						.concat(String.valueOf(saldo)).concat("|;"));
				bw.newLine();
			}
			System.out.println("lleno");
		} else {
			bw.write(cadena);
			bw.newLine();
			System.out.println("nulo o vacio");
		}
		bw.close();
		fw.close();
		System.out.println("Archivo OPAC creado correctamente");
		byte[] input_file;
		byte[] encodedBytes;
		input_file = Files.readAllBytes(Paths.get(archivo.getAbsolutePath()));
		encodedBytes = Base64.getEncoder().encode(input_file);
		response = new String(encodedBytes);
		return response;
	}

	@Override
	public ResponseMessage updateOpac(List<BaseLayoutRr7> getBaseLayoutRr7) {
		ResponseMessage respuesta = null;		
		List<Opac> getOpac = opacDAO.findAll();
		BaseLayoutRr7 baseLayoutRr7Result ;
		for (Opac opac: getOpac) {

			baseLayoutRr7Result = getBaseLayoutRr7
	                .stream().filter(producer -> (producer.getCtaQtoNivNvoCat()+producer.getTipoMoneda()+producer.getRamo()+producer.getSubramo()+producer.getSubsubramo()+producer.getSubCtaCatAnt()).
	                		equals(opac.getNivel1()+opac.getNivel2()+opac.getNivel3()+opac.getNivel4()+opac.getMoneda()
	                		+opac.getCveRamo()+opac.getCveSubRam()+opac.getCveSubSubRamo()+opac.getSubClaveOperAnaConex())).findFirst().orElse(null);
			if (baseLayoutRr7Result != null) {
				opac.setSaldo((int)baseLayoutRr7Result.getMontMonConsolidada());
			}else {
				opac.setSaldo(0);
			}			
		}
		if (opacDAO.saveAll(getOpac) != null) {
			respuesta = new ResponseMessage(Constantes.RESPONSEMESSAGE_OK, "Archivo Opac actualizado ", 1);
		}		
		return respuesta;
	}
}
