package com.ws_rr7_generico.services.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ws_rr7_generico.dao.FopaDAO;
import com.ws_rr7_generico.models.ArchivoRespuesta;
import com.ws_rr7_generico.models.Base;
import com.ws_rr7_generico.models.BaseLayoutRr7;
import com.ws_rr7_generico.models.Fopa;
import com.ws_rr7_generico.rest.reportesRegulatorios;
import com.ws_rr7_generico.services.FOPAService;
import com.ws_rr7_generico.util.Constantes;
import com.ws_rr7_generico.util.ResponseMessage;

@Transactional(rollbackFor = Exception.class)
@Service
public class FOPAServiceImpl implements FOPAService {
	
	Logger logger = LoggerFactory.getLogger(reportesRegulatorios.class);
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	private FopaDAO fopaDAO;
	String nivel1="0",nivel2="0",nivel3="0",nivel4="0",moneda="0",afectacion="0",
			nivelFondos="0";
	double saldo=0;
	String cadena = nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
			.concat(moneda).concat("|").concat(afectacion).concat("|").concat(nivelFondos).concat("|")
			.concat(String.valueOf(saldo)).concat("|;");

	@Override
	 public ArchivoRespuesta obtenerFOPA(String nombre) throws IOException {
		ArchivoRespuesta ar = new ArchivoRespuesta();
		ar.setBaseArchivo(GenerarTxtFopa(nombre));
		ar.setNombreArchivo(nombre);
		return ar;
	}
	public String GenerarTxtFopa(String nombre) throws IOException {
		String response = "";
		List<Fopa> ListaFopa = fopaDAO.findAll(Sort.by("nivel1").and(Sort.by("nivel2").and(Sort.by("nivel3").and(Sort.by("nivel4"))
				.and(Sort.by("moneda")).and(Sort.by("nivelfondos")))));
				
		File archivo = new File("D:\\TempSesa\\" + nombre);

		if (archivo.exists()) {
			archivo.delete();
		}
		archivo.createNewFile();
		FileWriter fw = new FileWriter(archivo, true);
		BufferedWriter bw = new BufferedWriter(fw);
		if (ListaFopa != null && ListaFopa.size() != 0) {
			for (Fopa Lista : ListaFopa) {

				nivel1 = Lista.getNivel1();
				nivel2 = Lista.getNivel2();
				nivel3 = Lista.getNivel3();
				nivel4 = Lista.getNivel4();
				moneda = Lista.getMoneda();
				afectacion = Lista.getAfectacion();
				nivelFondos = Lista.getNivelfondos();
				saldo = Lista.getSaldo();
				
				
				bw.write(nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
					.concat(moneda).concat("|").concat(afectacion).concat("|").concat(nivelFondos).concat("|")
					.concat(String.valueOf(saldo)).concat("|;"));
				bw.newLine();
			}
			System.out.println("lleno");
		} else {
			bw.write(cadena);
			bw.newLine();
			System.out.println("nulo o vacio");
		}
		bw.close();
		fw.close();
		System.out.println("Archivo FOPA creado correctamente");
		byte[] input_file;
		byte[] encodedBytes;
		input_file = Files.readAllBytes(Paths.get(archivo.getAbsolutePath()));
		encodedBytes = Base64.getEncoder().encode(input_file);
		response = new String(encodedBytes);
		return response;
	}
	@Override
	public String saveList(List<Fopa> lista) {

		fopaDAO.saveAll(lista);
		return "ok";
	}
	@Override
	public ResponseMessage updateFopa(List<BaseLayoutRr7> getBaseLayoutRr7) {
		ResponseMessage respuesta = null;
		List<Fopa> getFopa= fopaDAO.findAll();
		BaseLayoutRr7 baseLayoutRr7Result ;
		for (Fopa fopa: getFopa) {

			baseLayoutRr7Result = getBaseLayoutRr7
	                .stream().filter(producer -> (producer.getCtaQtoNivNvoCat()+producer.getTipoMoneda()+producer.getAfecto()+producer.getNivFondPropAdmi()).
	                		equals(fopa.getNivel1()+fopa.getNivel2()+fopa.getNivel3()+fopa.getNivel4()+fopa.getMoneda()
	                		+fopa.getAfectacion()+fopa.getNivelfondos())).findFirst().orElse(null);
			if (baseLayoutRr7Result != null) {
			
				fopa.setSaldo(baseLayoutRr7Result.getMontMonConsolidada());

			}else {
				fopa.setSaldo(0);
				
			}			
		}
		if (fopaDAO.saveAll(getFopa) != null) {
			respuesta = new ResponseMessage(Constantes.RESPONSEMESSAGE_OK, "Archivo Fopa actualizado ",1);
		}		
		return respuesta;
	}
	
	@Override
	public boolean getExistRecords(String anioMes) {

		boolean existenRegistros = false;
		

		String query = "SELECT IIF (COUNT(*) >= 1, 1, 0) AS EXISTEN_REGISTROS FROM CCMP WHERE ANIOMES = '" + anioMes + "';";

		logger.info(query);
		SqlRowSet rowSet = jdbcTemplate.queryForRowSet(query);

		while(rowSet.next()){
			existenRegistros =   rowSet.getInt("EXISTEN_REGISTROS") == 1 ? true : false ;
		}
		logger.info("existenRegistros " + existenRegistros);
		return existenRegistros;
	}
}
