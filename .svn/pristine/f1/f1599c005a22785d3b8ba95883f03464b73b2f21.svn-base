package com.ws_rr7_generico.services.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ws_rr7_generico.dao.CcmpDAO;
import com.ws_rr7_generico.dao.CordDAO;
import com.ws_rr7_generico.models.ArchivoRespuesta;
import com.ws_rr7_generico.models.Base;
import com.ws_rr7_generico.models.BaseLayoutRr7;
import com.ws_rr7_generico.models.Ccmp;
import com.ws_rr7_generico.models.Cord;
import com.ws_rr7_generico.rest.reportesRegulatorios;
import com.ws_rr7_generico.services.CCMPService;
import com.ws_rr7_generico.util.Constantes;
import com.ws_rr7_generico.util.ResponseMessage;

@Transactional(rollbackFor = Exception.class)
@Service
public class CCMPServiceImpl implements CCMPService{
	
	Logger logger = LoggerFactory.getLogger(reportesRegulatorios.class);
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	
	@Autowired
	private CcmpDAO ccmpDAO;
	String nivel1="0",nivel2="0",nivel3="0",nivel4="0",moneda="0";
	double capitalCont=0,ixv_inm_neto=0,utilValCapital=0,incCapInm=0,capitalPagad=0,ixvInmNetoRt=0,
			ixvInmNetoSus=0,cmp=0,cmpExigido=0,sobrante=0;
	String cadena = nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
			.concat(moneda).concat("|").concat(String.valueOf(capitalCont)).concat("|").concat(String.valueOf(ixv_inm_neto)).concat("|")
			.concat(String.valueOf(utilValCapital)).concat("|").concat(String.valueOf(incCapInm)).concat("|").concat(String.valueOf(capitalPagad)).concat("|")
			.concat(String.valueOf(ixvInmNetoRt)).concat("|").concat(String.valueOf(ixvInmNetoSus)).concat("|").concat(String.valueOf(cmp)).concat("|")
			.concat(String.valueOf(cmpExigido)).concat("|").concat(String.valueOf(sobrante)).concat("|;");

	@Override
	 public ArchivoRespuesta obtenerCCMP(String nombre) throws IOException {
		ArchivoRespuesta ar = new ArchivoRespuesta();
		ar.setBaseArchivo(GenerarTxtCcmp(nombre));
		ar.setNombreArchivo(nombre);
		return ar;
	}
	public String GenerarTxtCcmp(String nombre) throws IOException {
		String response = "";
		List<Ccmp> ListaCcmp = ccmpDAO.findAll(Sort.by("nivel1").and(Sort.by("nivel2").and(Sort.by("nivel3").and(Sort.by("nivel4"))
				.and(Sort.by("moneda")))));
				
		File archivo = new File("D:\\TempSesa\\" + nombre);

		if (archivo.exists()) {
			archivo.delete();
		}
		archivo.createNewFile();
		FileWriter fw = new FileWriter(archivo, true);
		BufferedWriter bw = new BufferedWriter(fw);
		if (ListaCcmp != null && ListaCcmp.size() != 0) {
			for (Ccmp Lista : ListaCcmp) {

				nivel1 = Lista.getNivel1();
				nivel2 = Lista.getNivel2();
				nivel3 = Lista.getNivel3();
				nivel4 = Lista.getNivel4();
				moneda = Lista.getMoneda();
				capitalCont = Lista.getCapitalContable();
				ixv_inm_neto = Lista.getIxvInmNeto();
				utilValCapital = Lista.getUtilValCapital();
				incCapInm = Lista.getIncCapInm();
				capitalPagad = Lista.getCapitalPagado();
				ixvInmNetoRt = Lista.getIxvInmNetoRt();
				ixvInmNetoSus = Lista.getIxvInmNetoRtSuscept();
				cmp = Lista.getCmp();
				cmpExigido = Lista.getCmpExigido();
				sobrante = Lista.getSobrante();				
				
				bw.write(nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
						.concat(moneda).concat("|").concat(String.valueOf(capitalCont)).concat("|").concat(String.valueOf(ixv_inm_neto)).concat("|")
						.concat(String.valueOf(utilValCapital)).concat("|").concat(String.valueOf(incCapInm)).concat("|").concat(String.valueOf(capitalPagad)).concat("|")
						.concat(String.valueOf(ixvInmNetoRt)).concat("|").concat(String.valueOf(ixvInmNetoSus)).concat("|").concat(String.valueOf(cmp)).concat("|")
						.concat(String.valueOf(cmpExigido)).concat("|").concat(String.valueOf(sobrante)).concat("|;"));
				bw.newLine();
			}
			System.out.println("lleno");
		} else {
			bw.write(cadena);
			bw.newLine();
			System.out.println("nulo o vacio");
		}
		bw.close();
		fw.close();
		System.out.println("Archivo CCMP creado correctamente");
		byte[] input_file;
		byte[] encodedBytes;
		input_file = Files.readAllBytes(Paths.get(archivo.getAbsolutePath()));
		encodedBytes = Base64.getEncoder().encode(input_file);
		response = new String(encodedBytes);
		return response;
	}
	@Override
	public ResponseMessage updateCcmp(List<BaseLayoutRr7> getBaseLayoutRr7) {
		ResponseMessage respuesta = null;		
		List<Ccmp> getCcmp = ccmpDAO.findAll();
		BaseLayoutRr7 baseLayoutRr7Result ;
		for (Ccmp ccmp: getCcmp) {

			baseLayoutRr7Result = getBaseLayoutRr7
	                .stream().filter(producer -> producer.getCtaQtoNivNvoCat().concat(""+producer.getTipoMoneda()).
	                		equals(ccmp.getNivel1()+ccmp.getNivel2()+ccmp.getNivel3()+ccmp.getNivel4()+ccmp.getMoneda())).findFirst().orElse(null);
			if (baseLayoutRr7Result != null) {
				ccmp.setUtilValCapital((int)baseLayoutRr7Result.getMontMonConsolidada());
			}else {
				ccmp.setUtilValCapital(0);
			}			
		}
		if (ccmpDAO.saveAll(getCcmp) != null) {
			respuesta = new ResponseMessage(Constantes.RESPONSEMESSAGE_OK, "Archivo Ccmp actualizado ", null);
		}		
		return respuesta;
	}
	
	@Override
	public boolean getExistRecords(String anioMes) {

		boolean existenRegistros = false;
		

		String query = "SELECT IIF (COUNT(*) >= 1, 1, 0) AS EXISTEN_REGISTROS FROM CCMP WHERE ANIOMES = '" + anioMes + "';";

		logger.info(query);
		SqlRowSet rowSet = jdbcTemplate.queryForRowSet(query);

		while(rowSet.next()){
			existenRegistros =   rowSet.getInt("EXISTEN_REGISTROS") == 1 ? true : false ;
		}
		logger.info("existenRegistros " + existenRegistros);
		return existenRegistros;
	}
}
