package com.ws_rr7_generico.services.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ws_rr7_generico.dao.CopeDAO;
import com.ws_rr7_generico.dao.FondDAO;
import com.ws_rr7_generico.models.ArchivoRespuesta;
import com.ws_rr7_generico.models.BaseLayoutRr7;
import com.ws_rr7_generico.models.Ccmp;
import com.ws_rr7_generico.models.Cope;
import com.ws_rr7_generico.models.Fond;
import com.ws_rr7_generico.rest.reportesRegulatorios;
import com.ws_rr7_generico.services.COPEService;
import com.ws_rr7_generico.services.FONDService;
import com.ws_rr7_generico.util.Constantes;
import com.ws_rr7_generico.util.ResponseMessage;

@Transactional(rollbackFor = Exception.class)
@Service
public class FONDServiceImpl implements FONDService{
	
	
	Logger logger = LoggerFactory.getLogger(reportesRegulatorios.class);
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	
	@Autowired
	private FondDAO fondDAO;
	String nivel1="0",nivel2="0",nivel3="0",nivel4="0",cveEmisorFond="0",serieFond="0",
			tipoValorFo="0",cveEmisorInst="0",serieInst="0",tipoValorInst="0", clasificacion="0",
			afectacion="0",isin="0",parametriz="0",descripc="0",liquidez="0",moneda="0",fchEmiInst="0",
			calif="0",nivelFondos="0";
	int consecutivoInve=0,consecutivoInst=0,porcParticInst=0,ctoAdqInst=0,valCotInst=0,incDecValua=0,mdaBase=0;
	
	String cadena = nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
			.concat(String.valueOf(consecutivoInve)).concat("|").concat(cveEmisorFond).concat("|").concat(serieFond).concat("|")
			.concat(tipoValorFo).concat("|").concat(cveEmisorInst).concat("|").concat(serieInst).concat("|")
			.concat(tipoValorInst).concat("|").concat(clasificacion).concat("|").concat(afectacion).concat("|")
			.concat(isin).concat("|").concat(parametriz).concat("|").concat(String.valueOf(consecutivoInst)).concat("|")
			.concat(descripc).concat("|").concat(liquidez).concat("|").concat(moneda).concat("|")
			.concat(fchEmiInst).concat("|").concat(String.valueOf(porcParticInst)).concat("|").concat(String.valueOf(ctoAdqInst)).concat("|")
			.concat(String.valueOf(valCotInst)).concat("|").concat(String.valueOf(incDecValua)).concat("|").concat(calif).concat("|")
			.concat(String.valueOf(mdaBase)).concat("|").concat(nivelFondos).concat("|;");

	@Override
	 public ArchivoRespuesta obtenerFOND(String nombre) throws IOException {
		ArchivoRespuesta ar = new ArchivoRespuesta();
		ar.setBaseArchivo(GenerarTxtFond(nombre));
		ar.setNombreArchivo(nombre);
		return ar;
	}
	public String GenerarTxtFond(String nombre) throws IOException {
		String response = "";
		List<Fond> ListaFond = fondDAO.findAll(Sort.by("nivel1").and(Sort.by("nivel2").and(Sort.by("nivel3").and(Sort.by("nivel4"))
				.and(Sort.by("consecutivoInve")).and(Sort.by("cveEmisorFond")).and(Sort.by("serieFond")).and(Sort.by("tipoValorFo"))
				.and(Sort.by("cveEmisorInst")).and(Sort.by("serieInst")).and(Sort.by("tipoValorInst")).and(Sort.by("clasificacion"))
				.and(Sort.by("afectacion")).and(Sort.by("isin")).and(Sort.by("parametriz")).and(Sort.by("consecutivoInst"))
				.and(Sort.by("descripc")).and(Sort.by("liquidez")).and(Sort.by("moneda")).and(Sort.by("fchEmiInst"))
				.and(Sort.by("porcParticInst")).and(Sort.by("ctoAdqInst")).and(Sort.by("valCotInst")).and(Sort.by("incDecValua"))
				.and(Sort.by("calif")).and(Sort.by("mdaBase")).and(Sort.by("nivelFondos")))));
				
		File archivo = new File("D:\\TempSesa\\" + nombre);

		if (archivo.exists()) {
			archivo.delete();
		}
		archivo.createNewFile();
		FileWriter fw = new FileWriter(archivo, true);
		BufferedWriter bw = new BufferedWriter(fw);
		if (ListaFond != null && ListaFond.size() != 0) {
			for (Fond Lista : ListaFond) {

				nivel1 = Lista.getNivel1();
				nivel2 = Lista.getNivel2();
				nivel3 = Lista.getNivel3();
				nivel4 = Lista.getNivel4();
				moneda = Lista.getMoneda();
				consecutivoInve = Lista.getConsecutivoInve();
				cveEmisorFond = Lista.getCveEmisorFond();
				serieFond = Lista.getSerieFond();
				tipoValorFo = Lista.getTipoValorFo();
				cveEmisorInst = Lista.getCveEmisorInst();
				serieInst = Lista.getSerieInst();
				tipoValorInst = Lista.getTipoValorInst();
				clasificacion = Lista.getClasificacion();
				afectacion = Lista.getAfectacion();
				isin = Lista.getIsin();
				parametriz = Lista.getParametriz();
				consecutivoInst = Lista.getConsecutivoInst();
				descripc = Lista.getDescripc();
				liquidez = Lista.getLiquidez();
				moneda = Lista.getMoneda();
				fchEmiInst = Lista.getFchEmiInst();
				porcParticInst = Lista.getPorcParticInst();
				ctoAdqInst = Lista.getCtoAdqInst();
				valCotInst = Lista.getValCotInst();
				incDecValua = Lista.getIncDecValua();
				calif = Lista.getCalif();
				mdaBase = Lista.getMdaBase();
				nivelFondos = Lista.getNivelFondos();
				
				bw.write(nivel1.concat("|").concat(nivel2).concat("|").concat(nivel3).concat("|").concat(nivel4).concat("|")
						.concat(String.valueOf(consecutivoInve)).concat("|").concat(cveEmisorFond).concat("|").concat(serieFond).concat("|")
						.concat(tipoValorFo).concat("|").concat(cveEmisorInst).concat("|").concat(serieInst).concat("|")
						.concat(tipoValorInst).concat("|").concat(clasificacion).concat("|").concat(afectacion).concat("|")
						.concat(isin).concat("|").concat(parametriz).concat("|").concat(String.valueOf(consecutivoInst)).concat("|")
						.concat(descripc).concat("|").concat(liquidez).concat("|").concat(moneda).concat("|")
						.concat(fchEmiInst).concat("|").concat(String.valueOf(porcParticInst)).concat("|").concat(String.valueOf(ctoAdqInst)).concat("|")
						.concat(String.valueOf(valCotInst)).concat("|").concat(String.valueOf(incDecValua)).concat("|").concat(calif).concat("|")
						.concat(String.valueOf(mdaBase)).concat("|").concat(nivelFondos).concat("|;"));
				bw.newLine();
			}
			System.out.println("lleno");
		} else {
			bw.write(cadena);
			bw.newLine();
			System.out.println("nulo o vacio");
		}
		bw.close();
		fw.close();
		System.out.println("Archivo FOND creado correctamente");
		byte[] input_file;
		byte[] encodedBytes;
		input_file = Files.readAllBytes(Paths.get(archivo.getAbsolutePath()));
		encodedBytes = Base64.getEncoder().encode(input_file);
		response = new String(encodedBytes);
		return response;
	}
	@Override
	public ResponseMessage updateFond(List<BaseLayoutRr7> getBaseLayoutRr7) {
		ResponseMessage respuesta = null;		
		List<Fond> getFond = fondDAO.findAll();
		BaseLayoutRr7 baseLayoutRr7Result ;
		for (Fond fond: getFond) {

			baseLayoutRr7Result = getBaseLayoutRr7
	                .stream().filter(producer -> (producer.getCtaQtoNivNvoCat()+producer.getTipoMoneda()).
	                		equals(fond.getNivel1()+fond.getNivel2()+fond.getNivel3()+fond.getNivel4()+fond.getMoneda()
	                		)).findFirst().orElse(null);
			if (baseLayoutRr7Result != null) {
				fond.setCtoAdqInst((int)baseLayoutRr7Result.getMontMonConsolidada());
			}else {
				fond.setCtoAdqInst(0);
			}			
		}
		if (fondDAO.saveAll(getFond) != null) {
			respuesta = new ResponseMessage(Constantes.RESPONSEMESSAGE_OK, "Archivo Fond actualizado ", null);
		}		
		return respuesta;
	}
	
	@Override
	public boolean getExistRecords(String anioMes) {

		boolean existenRegistros = false;

		String query = "SELECT IIF (COUNT(*) >= 1, 1, 0) AS EXISTEN_REGISTROS FROM FOND WHERE ANIOMES = '" + anioMes + "';";

		logger.info(query);
		SqlRowSet rowSet = jdbcTemplate.queryForRowSet(query);

		while(rowSet.next()){
			existenRegistros =   rowSet.getInt("EXISTEN_REGISTROS") == 1 ? true : false ;
		}
		logger.info("existenRegistros " + existenRegistros);
		return existenRegistros;
	}
	
}
